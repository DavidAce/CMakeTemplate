cmake_minimum_required(VERSION 3.12)

function(replace_or_remove_shared target_name)
    if(NOT TARGET ${target_name})
        return()
    endif()
    get_target_property(interface_libs ${target_name} INTERFACE_LINK_LIBRARIES)
    if(interface_libs)
#        message(WARNING "${target_name} has interface libs: ${interface_libs}")
        foreach(lib ${interface_libs})
            get_filename_component(lib_ext ${lib} EXT)
            if(${lib_ext} MATCHES "${CMAKE_SHARED_LIBRARY_SUFFIX}")
                get_filename_component(lib_we  ${lib} NAME_WE)
                get_filename_component(lib_dir ${lib} DIRECTORY)
                if(EXISTS ${lib_dir}/${lib_we}${CMAKE_STATIC_LIBRARY_SUFFIX})
                    list(APPEND non_shared_libs  ${lib_dir}/${lib_we}${CMAKE_STATIC_LIBRARY_SUFFIX})
                endif()
            else()
                list(APPEND non_shared_libs ${lib})
            endif()
        endforeach()
#        message(WARNING "${target_name} has interface libs: ${non_shared_libs}")
        set_target_properties(${target_name} PROPERTIES INTERFACE_LINK_LIBRARIES "${non_shared_libs}")
    endif()
endfunction()



function(remove_duplicates_shallow target_name)
    if(NOT TARGET ${target_name})
        return()
    endif()
    get_target_property(interface_libs ${target_name} INTERFACE_LINK_LIBRARIES)
    if(interface_libs)
        list(REVERSE "interface_libs")
        list(REMOVE_DUPLICATES "interface_libs")
        list(REVERSE "interface_libs")
        set_target_properties(${target_name} PROPERTIES INTERFACE_LINK_LIBRARIES "${interface_libs}")
    endif()

endfunction()


function(remove_duplicates_recursive target_name)
    if(NOT TARGET ${target_name})
        return()
    endif()
    include(${PROJECT_SOURCE_DIR}/cmake/getExpandedTarget.cmake)
    expand_target_libs_interface_only(${target_name} interface_libs)
    if(interface_libs)
        list(REVERSE "interface_libs")
        list(REMOVE_DUPLICATES "interface_libs")
        list(REVERSE "interface_libs")
        set_target_properties(${target_name} PROPERTIES INTERFACE_LINK_LIBRARIES "${interface_libs}")
    endif()
endfunction()

function(remove_pthread_shallow target_name)
    if(NOT TARGET ${target_name})
        return()
    endif()
    get_target_property(interface_libs ${target_name} INTERFACE_LINK_LIBRARIES)
    if(interface_libs)
#        message(WARNING "${target_name} has interface libs: ${interface_libs}")
        list(FILTER "interface_libs" EXCLUDE REGEX "Threads|lpthread|NOTFOUND")
#        message(WARNING "${target_name} has interface libs: ${interface_libs}")
        set_target_properties(${target_name} PROPERTIES INTERFACE_LINK_LIBRARIES "${interface_libs}")
    endif()
endfunction()


function(remove_pthread_recursive target_name)
    if(NOT TARGET ${target_name})
        return()
    endif()
    include(${PROJECT_SOURCE_DIR}/cmake/getExpandedTarget.cmake)
    expand_target_libs_interface_only(${target_name} interface_libs)
    if(interface_libs)
        list(FILTER "interface_libs" EXCLUDE REGEX "Threads|lpthread|NOTFOUND")
        set_target_properties(${target_name} PROPERTIES INTERFACE_LINK_LIBRARIES "${interface_libs}")
    endif()
endfunction()



function(remove_library_recursive target_name regex)
    if(NOT TARGET ${target_name})
        return()
    endif()
    include(${PROJECT_SOURCE_DIR}/cmake/getExpandedTarget.cmake)
    expand_target_libs_interface_only(${target_name} interface_libs)
    if(interface_libs)
        list(FILTER "interface_libs" EXCLUDE REGEX "${regex}|NOTFOUND")
        set_target_properties(${target_name} PROPERTIES INTERFACE_LINK_LIBRARIES "${interface_libs}")
    endif()
endfunction()


function(remove_library_shallow target_name regex)
    if(NOT TARGET ${target_name})
        return()
    endif()
    get_target_property(interface_libs ${target_name} INTERFACE_LINK_LIBRARIES)
    if(interface_libs)
#        message(WARNING "${target_name} has interface libs: ${interface_libs}")
        list(FILTER "interface_libs" EXCLUDE REGEX "${regex}|NOTFOUND")
#        message(WARNING "${target_name} has interface libs: ${interface_libs}")
        set_target_properties(${target_name} PROPERTIES INTERFACE_LINK_LIBRARIES "${interface_libs}")
    endif()
endfunction()


function(replace_pthread_shallow target_name)
    if(NOT TARGET ${target_name})
        return()
    endif()
    get_target_property(interface_libs ${target_name} INTERFACE_LINK_LIBRARIES)
    if(interface_libs)
#        message(WARNING "${target_name} has interface libs: ${interface_libs}")
        list(TRANSFORM interface_libs REPLACE "Threads::Threads|-lpthread" "pthread")
#        message(WARNING "${target_name} has interface libs: ${interface_libs}")
        set_target_properties(${target_name} PROPERTIES INTERFACE_LINK_LIBRARIES "${interface_libs}")
    endif()
endfunction()


function(replace_pthread_recursive target_name)
    if(NOT TARGET ${target_name})
        return()
    endif()
    include(${PROJECT_SOURCE_DIR}/cmake/getExpandedTarget.cmake)
    expand_target_libs_interface_only(${target_name} interface_libs)
    if(interface_libs)
#        message(WARNING "${target_name} has interface libs: ${interface_libs}")
        list(TRANSFORM interface_libs REPLACE "Threads::Threads|-lpthread" "pthread")
#        message(WARNING "${target_name} has interface libs: ${interface_libs}")
        set_target_properties(${target_name} PROPERTIES INTERFACE_LINK_LIBRARIES "${interface_libs}")
    endif()
endfunction()



function(replace_library_shallow target_name regex expr)
    if(NOT TARGET ${target_name})
        return()
    endif()
    get_target_property(interface_libs ${target_name} INTERFACE_LINK_LIBRARIES)
    if(interface_libs)
#        message(WARNING "${target_name} has interface libs: ${interface_libs}")
        list(TRANSFORM interface_libs REPLACE "Threads::Threads|-lpthread" "pthread")
#        message(WARNING "${target_name} has interface libs: ${interface_libs}")
        set_target_properties(${target_name} PROPERTIES INTERFACE_LINK_LIBRARIES "${interface_libs}")
    endif()
endfunction()


function(replace_library_recursive target_name regex expr)
    if(NOT TARGET ${target_name})
        return()
    endif()
    include(${PROJECT_SOURCE_DIR}/cmake/getExpandedTarget.cmake)
    expand_target_libs_interface_only(${target_name} interface_libs)
    if(interface_libs)
#        message(WARNING "${target_name} has interface libs: ${interface_libs}")
        list(TRANSFORM interface_libs REPLACE "${regex}" "${expr}")
#        message(WARNING "${target_name} has interface libs: ${interface_libs}")
        set_target_properties(${target_name} PROPERTIES INTERFACE_LINK_LIBRARIES "${interface_libs}")
    endif()
endfunction()
